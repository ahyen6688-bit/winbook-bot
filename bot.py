# bot.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from keep_alive import keep_alive   # n·∫øu m√†y c√≥ file keep_alive.py (Flask thread)
import asyncio

# ========== C·∫§U H√åNH ==========
VIDEO_URL = "https://streamable.com/i5w6rq"   # n·∫øu link n√†y dead -> thay b·∫±ng link m·ªõi
ADMIN_LINK = "https://t.me/Mikamika2111"
HOMEPAGE = "https://www.winbook1.com"

TOKEN = os.getenv("BOT_TOKEN")  # ph·∫£i set trong Render environment

BAD_WORDS = [
    "ƒë·ª•", "ƒë·ªãt", "dm", "dcm", "m·∫π m√†y", "ngu", "cc", "l·ªìn",
    "fuck", "bitch", "shit", "xxx", "sex", "http", "https", "t.me", ".com"
]

violation_count = {}

# ========== LOGGING ==========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# ========== WELCOME (TH√ÄNH VI√äN M·ªöI) ==========
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # G·ª≠i cho m·ªói th√†nh vi√™n m·ªõi
    for member in update.message.new_chat_members:
        try:
            # Ki·ªÉm tra bot ƒë√£ l√† admin ch∆∞a (n·∫øu kh√¥ng c√≥ quy·ªÅn g·ª≠i media trong nh√≥m th√¨ s·∫Ω fail)
            bot_member = await context.bot.get_chat_member(update.effective_chat.id, context.bot.id)
            if bot_member.status not in ("administrator", "creator"):
                # N·∫øu bot ch∆∞a l√† admin th√¨ g·ª≠i text c·∫£nh b√°o (ho·∫∑c ko g·ª≠i)
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è Bot c·∫ßn quy·ªÅn admin ƒë·ªÉ g·ª≠i ·∫£nh/video ch√†o m·ª´ng. Vui l√≤ng c·∫•p quy·ªÅn admin cho bot."
                )
                return

            # Keyboard buttons
            keyboard = [
                [
                    InlineKeyboardButton("üåê Trang ch·ªß", url=HOMEPAGE),
                    InlineKeyboardButton("üé¨ Video", url=VIDEO_URL),
                ],
                [
                    InlineKeyboardButton("üëÆ Admin", url=ADMIN_LINK)
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # G·ª≠i video (n·∫øu URL l√† video streamable/youtube it may be a link; Telegram s·∫Ω preview)
            caption = (
                f"üéâ Ch√†o m·ª´ng {member.mention_html()} ƒë·∫øn v·ªõi Winbook!\n\n"
                f"üíö Ch√∫c b·∫°n vui v·∫ª v√† may m·∫Øn trong nh√≥m nh√© üíö"
            )

            # Th·ª≠ g·ª≠i video (n·∫øu streamable link h·ªó tr·ª£ g·ª≠i, Telegram s·∫Ω x·ª≠ l√Ω)
            try:
                await context.bot.send_video(
                    chat_id=update.effective_chat.id,
                    video=VIDEO_URL,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            except Exception as e_video:
                # N·∫øu g·ª≠i video l·ªói (v√≠ d·ª• streamable dead), g·ª≠i ·∫£nh (fallback)
                logger.warning(f"Send video failed: {e_video}. Sending a banner image fallback.")
                banner_img = "https://i.postimg.cc/YqJt9y0C/winbook-banner.jpg"  # thay b·∫±ng link h√¨nh th·∫≠t c·ªßa m√†y
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=banner_img,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.exception("Error in welcome handler: %s", e)


# ========== /start (g·ª≠i khi user private chat v·ªõi bot) ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üåê Trang ch·ªß", url=HOMEPAGE),
            InlineKeyboardButton("üé¨ Video", url=VIDEO_URL),
        ],
        [
            InlineKeyboardButton("üëÆ Admin", url=ADMIN_LINK)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    caption = (
        f"üëã Xin ch√†o {update.effective_user.mention_html()}!\n\n"
        f"üçÄ <b>Bot Winbook</b> ƒëang ho·∫°t ƒë·ªông üí™\n\n"
        f"üéâ Ch√∫c b·∫°n vui v·∫ª v√† may m·∫Øn trong nh√≥m!"
    )

    # c·ªë g·∫Øng g·ª≠i video tr∆∞·ªõc, fallback sang ·∫£nh
    try:
        await update.message.reply_video(
            video=VIDEO_URL,
            caption=caption,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.warning("reply_video failed: %s. Using image fallback.", e)
        banner_img = "https://i.postimg.cc/YqJt9y0C/winbook-banner.jpg"
        await update.message.reply_photo(
            photo=banner_img,
            caption=caption,
            parse_mode="HTML",
            reply_markup=reply_markup
        )


# ========== FILTER TIN NH·∫ÆN X·∫§U ==========
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.lower()
    chat_id = update.effective_chat.id
    user = update.message.from_user
    user_id = user.id

    # n·∫øu ph√°t hi·ªán chu·ªói ch·ªØ x·∫•u (simple contains)
    if any(bad in text for bad in BAD_WORDS):
        try:
            await update.message.delete()
        except Exception:
            pass

        violation_count[user_id] = violation_count.get(user_id, 0) + 1
        count = violation_count[user_id]

        if count < 3:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è {user.mention_html()} vi ph·∫°m l·∫ßn {count}/3. C·∫©n th·∫≠n k·∫ªo b·ªã kick!",
                parse_mode="HTML"
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üö´ {user.mention_html()} ƒë√£ b·ªã kick do vi ph·∫°m 3 l·∫ßn!",
                parse_mode="HTML"
            )
            try:
                await context.bot.ban_chat_member(chat_id, user_id)
            except Exception as e:
                logger.warning("Kh√¥ng th·ªÉ kick: %s", e)
            violation_count.pop(user_id, None)


# ========== MAIN ==========
def main():
    if not TOKEN:
        logger.error("BOT_TOKEN ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t trong environment variables.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))

    # N·∫øu ch·∫°y tr√™n Render: g·ªçi keep_alive() ƒë·ªÉ c√≥ webserver small (optional)
    try:
        keep_alive()
    except Exception:
        # n·∫øu kh√¥ng c√≥ file keep_alive.py th√¨ b·ªè qua
        pass

    # ** Ghi nh·ªõ: d√πng run_polling() (kh√¥ng await) ƒë·ªÉ tr√°nh conflict v·ªõi event loop **
    logger.info("ü§ñ Winbook Bot ƒëang ch·∫°y... (polling)")
    app.run_polling()


if __name__ == "__main__":
    main()
